version: '3'

services:

  #--------------------------------------------------#
  #                    Databases 
  #--------------------------------------------------#
  postgres:
    image: postgis/postgis:12-2.5-alpine
    container_name: postgres
    restart: always
    environment:
    - POSTGRES_USER=ct_admin
    - POSTGRES_PASSWORD=wowimsosecure
    - POSTGRES_DB=geoconnections
    ports:
    - "5432:5432"
    volumes:
    - postgres-person:/var/lib/postgresql/data
  
  postgres-person:
    image: postgis/postgis:12-2.5-alpine
    container_name: postgres-person
    restart: always
    environment:
    - POSTGRES_USER=ct_admin
    - POSTGRES_PASSWORD=wowimsosecure
    - POSTGRES_DB=geoconnections
    ports:
    - "6432:5432"
    volumes:
    - postgres-location:/var/lib/postgresql/data

  postgres-location:
    image: postgis/postgis:12-2.5-alpine
    container_name: postgres-location
    restart: always
    environment:
    - POSTGRES_USER=ct_admin
    - POSTGRES_PASSWORD=wowimsosecure
    - POSTGRES_DB=geoconnections
    ports:
    - "7432:5432"
    volumes:
    - postgres:/var/lib/postgresql/data

  #--------------------------------------------------#
  #                  Microservices   
  #--------------------------------------------------#
  api:
    build: api
    container_name: api
    command: ["flask", "run", "--host=0.0.0.0"]
    volumes:
      - ./api:/backend
    environment:
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=geoconnections
      - DB_HOST=postgres
      - DB_PORT=5432
    ports:
      - "5000:5000"
    depends_on:
    - postgres

  location-grpc:
    build: location-grpc
    container_name: location-grpc
    command: ["python", "service.py"]
    environment:
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=geoconnections
      - DB_HOST=postgres-location
      - DB_PORT=5432
    volumes:
      - ./location-grpc:/backend
    ports:
      - "5005:5005"

  location-api:
    build: location-api
    container_name: location-api
    command: ["flask", "run", "--host=0.0.0.0"]
    volumes:
      - ./location-api:/backend
    environment:
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=geoconnections
      - DB_HOST=postgres-location
      - DB_PORT=5432
      - TOPIC_NAME=location-events
      - KAFKA_SERVER=kafka:9092  # 
      - GRPC_HOST=location-grpc
      - GRPC_PORT=5005
    ports:
      - "5001:5000"
    depends_on:
    - postgres

  person-grpc:
    build: person-grpc
    container_name: person-grpc
    command: ["python", "service.py"]
    environment:
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=geoconnections
      - DB_HOST=postgres-person
      - DB_PORT=5432
    volumes:
      - ./person-grpc:/backend
    ports:
      - "5007:5005"

  person-api:
    build: person-api
    container_name: person-api
    command: ["flask", "run", "--host=0.0.0.0"]
    volumes:
      - ./person-api:/backend
    environment:
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=geoconnections
      - DB_HOST=postgres-person
      - DB_PORT=5432
      - GRPC_HOST=person-grpc
      - GRPC_PORT=5005
    ports:
      - "5002:5000"
    depends_on:
    - postgres

  connection-api:
    build: connection-api
    container_name: connections-api
    command: ["flask", "run", "--host=0.0.0.0"]
    volumes:
      - ./connection-api:/backend
    environment:
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=geoconnections
      - DB_HOST=postgres-location
      - DB_PORT=5432
    ports:
      - "5003:5000"
    depends_on:
    - postgres

  location-consumer:
    build: location-consumer
    container_name: location-consumer
    volumes:
      - ./location-consumer:/backend
    environment:
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=geoconnections
      - DB_HOST=postgres-location
      - DB_PORT=5432
      - GRPC_HOST=person-grpc
      - GRPC_PORT=5005
    ports:
      - "5006:5000"
    depends_on:
    - postgres
    - zookeeper
    - kafka
  #--------------------------------------------------#
  #                  Kafka Steaming Confluent
  #--------------------------------------------------#
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:5.2.0
    container_name: kafka
    ports:
      - '29092:29092'
    
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS:  PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes: 
        - /var/run/docker.sock:/var/run/docker.sock
    
  kafka-create-topics:
    image: confluentinc/cp-kafka:5.2.0
    container_name: kafka-cli
    depends_on:
      - kafka
    hostname: kafka-create-topics
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 20 && \
                       kafka-topics --create --topic location-events --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 && \
                       sleep infinity'"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
  #--------------------------------------------------#
  #                  Kafka Steaming Bitnami
  #--------------------------------------------------#
  # zookeeper:
  #   container_name: zookeeper-server
  #   image: docker.io/bitnami/zookeeper:3.7
  #   ports:
  #     - "2181:2181"
  #   volumes:
  #     - "zookeeper_data:/bitnami"
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes

  # kafka:
  #   container_name: kafka-server
  #   image: docker.io/bitnami/kafka:3
  #   ports:
  #     - "9092:9092"
  #   volumes:
  #     - "kafka_data:/bitnami"
  #   environment:
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-server:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   depends_on:
  #     - zookeeper

  # client:
  #   tty: true
  #   build: client
  #   command: ["npm", "start"]
  #   volumes:
  #     - ./client:/frontend
  #     - node-modules:/frontend/node_modules
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - '3000:3000'
  #   depends_on:
  #     - api

volumes:
  # node-modules:
  postgres: 
  postgres-person:
  postgres-location:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local