sswagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger UdaConnect"
  contact:
    email: "azzahamdani@gmail.com"
host: "localhost:30000"
basePath: "/api"
tags:
- name: "persons"
  description: "Creating and Reading Persons"
- name: "locations"
  description: "Creating and Reading Locations"
- name: "connections"
  description: "Reading Locations of Persons within a distance and time bounderies of a given Person "
schemes:
- "http"
paths:
  /persons:
    post:
      tags:
      - "persons"
      summary: "Add a Person"
      description: "Endpoint used to add a person/user to the UdaConnect"
      operationId: "addPerson"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Json object containing a person attributes"
        required: true
        schema:
          $ref: "#/definitions/PersonSchema"
      responses:
        "500":
          description: "internal server error"
        "400":
          description: "bad request"
        "201":
          description: "created"
          schema:
            $ref: "#/definitions/PersonSchema"
    get:
      tags:
      - "persons"
      summary: "Get all Persons"
      description: "Endpoint used to fetch all persons/users of UdaConnect"
      operationId: "getAllPersons"
      produces:
      - "application/json"
      responses:
        "200":
          description: "all persons fetched"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PersonSchema"
  /persons/{person_id}:
    get:
      tags:
      - "persons"
      summary: "Get a Person by providing an ID"
      description: "Endpoint used to fetch a person by giving its unique ID"
      operationId: "getPersonById"
      produces:
      - "application/json"
      parameters:
      - name: "person_id"
        in: "path"
        description: "Unique ID for a given Person"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "person fetched"
          schema:
            $ref: "#/definitions/PersonSchema"
        "401":
          description: "unauthorized"
        "404":
          description: "person not found"
  /locations:
    post:
      tags:
      - "locations"
      summary: "Add a Location"
      description: "Endpoint used to add a location to UdaConnect for a given User/Person using its ID"
      operationId: "addLocation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON object containing location attributes including person_id"
        required: true
        schema:
          $ref: "#/definitions/LocationSchema"
      responses:
        "200":
          description: "sent to event-stream"
          schema:
            $ref: "#/definitions/LocationSchema"
  /locations/{location_id}:
    get:
      tags:
      - "locations"
      summary: "Get a Location by Providing an ID"
      description: "Endpoint used to fetch a location by giving its unique ID "
      operationId: "getLocationById"
      produces:
      - "application/json"
      parameters:
      - name: "location_id"
        in: "path"
        description: "Unique ID for a given location"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "location fetched"
          schema:
            $ref: "#/definitions/LocationSchema"
        "401":
          description: "unauthorized"
        "404":
          description: "Person not found"
  /connections:
    get:
      tags:
      - "connections"
      summary: "Get locations within a distance and a time bounderies "
      description: "Returns a single person"
      operationId: "getConnections"
      produces:
      - "application/json"
      parameters:
      - name: "person_id"
        in: "query"
        description: "Unique ID for a given Person"
        required: true
        type: "integer"
        format: "int64"
        default: 6
      - name: "start_date"
        in: "query"
        description: "Lower bound of date range"
        required: true
        type: "string"
        format: "date-time"
        default: "2020-01-01"
      - name: "end_date"
        in: "query"
        description: "Upper bound of date range"
        required: true
        type: "string"
        format: "date-time"
        default: "2020-12-30"
      - name: "distance"
        in: "query"
        description: "Proximity to a given user in meters"
        required: true
        type: "integer"
        format: "int64"
        default: 5
      responses:
        "200":
          description: "locations fetched"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ConnectionSchema"
definitions:
  PersonSchema:
    type: "object"
    required:
    - "first_name"
    - "last_name"
    - "company_name"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 2
      first_name:
        type: "string"
        example: "Taco"
      last_name:
        type: "string"
        example: "Fargo"
      company_name:
        type: "string"
        example: "Udacity"
  LocationSchema:
    type: "object"
    required:
    - "person_id"
    - "longitude"
    - "latitude"
    - "creation_time"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      person_id:
        type: "integer"
        format: "int64"
        example: 2
      longitude:
        type: "string"
        example: "-122.2222"
      latitude:
        type: "string"
        example: "37.3333"
      creation_time:
        type: "string"
        format: "date-time"
        example: "2022-03-15T10:37:06"
  ConnectionSchema:
    type: "object"
    properties:
      location:
          $ref: "#/definitions/LocationSchema"
      person:
          $ref: "#/definitions/PersonSchema"